# 变量
# a,b = "he",12
# print(a,b)
# a,b = b,a
# print(a,b)
# c,a,b = a,b,a
# print(a,b,c)
# a = b = c = 10
# print(a,b,c)
# 单引号、双引号、三引号的用法
# x = "I said: 'hello'"
# print(x)
# print('I said: "hello"')
# print('''I said: 'he said "hello"'.''')
# print("this \
# is \
# good")


### 字符串
# 字符串必须使用引号括起来，用引号的就是字符串
# 下面是例子
# s = 1.57
# print(s)
# print("I am s m tall")
#
# a = 4
# b = 5
# print("a+b")       #这里输出的只是双引号的字符串 不会输出9
# print(a+b)         #这样才是两个变量的相加的数值



# 制表符和换行符
# para_str = """多行字符串可以使用制表符
# TAB ( \t )。
# 也可以使用换行符[ \n ]。
# <HTML><HEAD><TITLE>
# Friends CGI Demo</TITLE></HEAD>
# <BODY><H3>ERROR</H3>
# <FORM><INPUT TYPE=button VALUE=Back
# ONCLICK="window.history.back()"></FORM>
# </BODY></HTML>
# """
# print(para_str)



#字符串下标
#有n个字符的字符串，其中的每个字符的长度为1的字符串
#从左到右依次编号为 0,1,2,..n-1
#从右到左依次编号为 -1,-2,..-n
# a = "ABCD"
# print(a[-1])
# print(a[0])
# print(a[2])

# 以下chatGPT给出的解答
#
# 这句话描述的是字符串在Python（以及一些其他编程语言）中的索引规则。让我为你解释一下：
#
# 假设我们有一个字符串 s = "Python"。长度为6，也就是 n = 6。
#
# 从左到右的编号：每个字符都有一个从0开始的索引：
#
# s[0] = 'P'
# s[1] = 'y'
# s[2] = 't'
# s[3] = 'h'
# s[4] = 'o'
# s[5] = 'n'
# 从右到左的编号：每个字符也都有一个从-1开始的负索引：
#
# s[-1] = 'n'
# s[-2] = 'o'
# s[-3] = 'h'
# s[-4] = 't'
# s[-5] = 'y'
# s[-6] = 'P'
# 这种负索引机制非常有用，因为它可以很方便地让我们访问字符串的末尾部分。例如，s[-1]直接给出了字符串的最后一个字符，而无需知道字符串的确切长度。
#
# 所以，当描述中提到“从右到左依次编号为 -1,-2,..-n”，其实就是说字符串的最后一个字符的索引是-1，倒数第二个字符的索引是-2，以此类推，直到第一个字符的索引是-n。
#


# 用"+"连接字符串
# a = "ABCD"
# b = "1234"
# a = a+b
# print(a)
# a = a+a[1]
# print(a)

# 用in，not in 判断字串
# a = "hello"
# b = "python"
# print("el" in a)
# print("th" not in b)
# print("lot" in a)



# 字符串和数的转换
# int(x)转换成整数   x不会变成整数 int(x)这个表达式的值是整数
# float(x)转换成小数
# str(x)转换成字符串
# eval(x)求其值 把字符串x看作一个python表达式 求其值

# a = 15
# b = "12"
# print(a + int(b))
# print(str(a) + b)
# c = 1 + float("3.5")
# print(c)
# print(3 + eval("4.5"))
# print(eval("3+2"))
# print(eval("3+a"))


# 输入输出
print(1,2,3,end="")
print(1)
